<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>My Test Scores</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        :root {
            --bg-color: #111827;
            --card-bg: #1f2937;
            --primary-color: #3b82f6;
            --primary-hover: #60a5fa;
            --text-color: #e5e7eb;
            --text-muted: #9ca3af;
            --input-bg: #374151;
            --input-border: #4b5563;
            --card-border: rgba(59, 130, 246, 0.5);
            --input-focus: #60a5fa;
            --border-radius: 8px;
            --shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.3), 0 4px 6px -2px rgba(0, 0, 0, 0.15);
            --header-bg: linear-gradient(135deg, #374151 0%, #1e3a8a 100%);
            --green-color: #10b981;
            --red-color: #ef4444;
            --yellow-color: #f59e0b;
        }
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: var(--bg-color);
            color: var(--text-color);
            min-height: 100vh;
        }

        .dashboard-header {
            background: var(--header-bg);
            padding: 30px 20px;
            text-align: center;
            margin-bottom: 30px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
        }

        .dashboard-header h1 {
            font-weight: 600;
            font-size: 28px;
            color: var(--text-color);
            margin-bottom: 5px;
        }

        .dashboard-header p {
            color: var(--text-muted);
            font-size: 16px;
            opacity: 0.9;
        }

        .container {
            padding: 0 30px 40px;
            max-width: 1200px;
            margin: 0 auto;
        }

        .dashboard-title {
            font-size: 24px;
            font-weight: 600;
            margin-bottom: 20px;
            color: var(--text-color);
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .dashboard-title i {
            color: var(--primary-color);
        }

        .table-container {
            background-color: var(--card-bg);
            border-radius: var(--border-radius);
            box-shadow: var(--shadow);
            overflow: hidden;
            margin-top: 20px;
        }

        .scores-table {
            width: 100%;
            border-collapse: collapse;
        }

        .scores-table th,
        .scores-table td {
            padding: 16px 20px;
            text-align: left;
            border-bottom: 1px solid var(--input-border);
        }

        .scores-table th {
            background-color: rgba(0, 0, 0, 0.2);
            font-weight: 600;
            font-size: 14px;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            color: var(--text-color);
        }

        .scores-table tr:last-child td {
            border-bottom: none;
        }

        .scores-table tr:hover td {
            background-color: rgba(255, 255, 255, 0.05);
        }

        .score-percentage {
            font-weight: 600;
            display: flex;
            align-items: center;
            gap: 5px;
        }

        .score-high {
            color: var(--green-color);
        }

        .score-medium {
            color: var(--yellow-color);
        }

        .score-low {
            color: var(--red-color);
        }

        .btn {
            display: inline-block;
            padding: 8px 16px;
            background-color: var(--primary-color);
            color: white;
            text-decoration: none;
            font-weight: 500;
            border-radius: var(--border-radius);
            transition: all 0.3s ease;
            text-align: center;
            border: none;
            cursor: pointer;
            font-size: 13px;
        }

        .btn:hover {
            background-color: var(--primary-hover);
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(59, 130, 246, 0.4);
        }

        .btn i {
            margin-right: 5px;
        }

        .no-scores {
            background-color: var(--card-bg);
            border-radius: var(--border-radius);
            padding: 30px;
            text-align: center;
            box-shadow: var(--shadow);
            margin-top: 20px;
        }

        .no-scores i {
            font-size: 48px;
            color: var(--text-muted);
            margin-bottom: 15px;
            display: block;
        }

        .no-scores p {
            font-size: 16px;
            color: var(--text-muted);
        }

        .score-info {
            margin-top: 4px;
            font-size: 12px;
            color: var(--text-muted);
        }

        /* Modal Styles */
        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: rgba(0, 0, 0, 0.7);
            display: flex;
            align-items: center;
            justify-content: center;
            z-index: 1000;
            opacity: 0;
            visibility: hidden;
            transition: all 0.3s ease;
        }

        .modal-overlay.active {
            opacity: 1;
            visibility: visible;
        }

        .modal-container {
            background-color: var(--card-bg);
            width: 90%;
            max-width: 800px;
            max-height: 90vh;
            border-radius: var(--border-radius);
            box-shadow: var(--shadow);
            overflow: hidden;
            transform: translateY(-20px);
            transition: all 0.3s ease;
        }

        .modal-overlay.active .modal-container {
            transform: translateY(0);
        }

        .modal-header {
            background: var(--header-bg);
            padding: 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            border-bottom: 1px solid var(--input-border);
        }

        .modal-header h2 {
            font-size: 20px;
            font-weight: 600;
            color: var(--text-color);
        }

        .modal-close {
            background: transparent;
            border: none;
            color: var(--text-muted);
            font-size: 22px;
            cursor: pointer;
            transition: color 0.2s;
        }

        .modal-close:hover {
            color: var(--text-color);
        }

        .modal-body {
            padding: 20px;
            overflow-y: auto;
            max-height: calc(90vh - 130px);
        }

        .detail-card {
            background-color: rgba(0, 0, 0, 0.1);
            border-radius: var(--border-radius);
            padding: 15px;
            margin-bottom: 20px;
        }

        .detail-title {
            font-size: 16px;
            font-weight: 600;
            margin-bottom: 10px;
            color: var(--primary-color);
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .detail-row {
            display: flex;
            justify-content: space-between;
            margin-bottom: 8px;
            padding-bottom: 8px;
            border-bottom: 1px solid var(--input-border);
        }

        .detail-row:last-child {
            border-bottom: none;
            margin-bottom: 0;
            padding-bottom: 0;
        }

        .detail-label {
            font-weight: 500;
            color: var(--text-muted);
        }

        .detail-value {
            font-weight: 500;
        }

        .questions-list {
            margin-top: 15px;
        }

        .question-item {
            background-color: rgba(0, 0, 0, 0.1);
            border-radius: var(--border-radius);
            padding: 15px;
            margin-bottom: 15px;
        }

        .question-text {
            font-weight: 500;
            margin-bottom: 10px;
        }

        .answer-container {
            background-color: rgba(255, 255, 255, 0.05);
            border-radius: 4px;
            padding: 10px;
            margin-bottom: 5px;
        }

        .question-meta {
            display: flex;
            justify-content: space-between;
            color: var(--text-muted);
            font-size: 12px;
            margin-top: 10px;
        }

        .progress-container {
            margin: 20px 0;
        }

        .progress-bar {
            height: 10px;
            background-color: var(--input-bg);
            border-radius: 5px;
            overflow: hidden;
        }

        .progress-fill {
            height: 100%;
            border-radius: 5px;
            transition: width 0.5s ease;
        }

        .progress-high {
            background-color: var(--green-color);
        }

        .progress-medium {
            background-color: var(--yellow-color);
        }

        .progress-low {
            background-color: var(--red-color);
        }

        .progress-stats {
            display: flex;
            justify-content: space-between;
            margin-top: 5px;
            font-size: 14px;
        }

        .performance-status {
            margin-top: 5px;
            font-size: 14px;
            font-weight: 500;
        }

        .status-high {
            color: var(--green-color);
        }

        .status-medium {
            color: var(--yellow-color);
        }

        .status-low {
            color: var(--red-color);
        }

        .modal-footer {
            padding: 15px 20px;
            border-top: 1px solid var(--input-border);
            display: flex;
            justify-content: flex-end;
        }

        .loading-spinner {
            display: none;
            margin: 40px auto;
            text-align: center;
        }

        .spinner {
            border: 4px solid var(--input-border);
            border-top: 4px solid var(--primary-color);
            border-radius: 50%;
            width: 30px;
            height: 30px;
            animation: spin 1s linear infinite;
            margin: 0 auto 15px;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        @media screen and (max-width: 768px) {
            .container {
                padding: 0 15px 30px;
            }
            
            .scores-table th,
            .scores-table td {
                padding: 12px 10px;
            }
            
            .table-container {
                overflow-x: auto;
            }
            
            .scores-table {
                min-width: 650px;
            }

            .modal-container {
                width: 95%;
            }

            .detail-row {
                flex-direction: column;
                gap: 5px;
            }
        }

        .invalid-data {
            font-style: italic;
            color: var(--text-muted);
        }
    </style>
</head>
<body>
    <%- include('../public/navbar.html') %>
    
    <div class="dashboard-header">
        <h1>My Test Scores</h1>
        <p>Review your performance in all completed tests</p>
    </div>
    
    <div class="container">
        <div class="dashboard-title">
            <i class="fas fa-chart-bar"></i> Score History
        </div>
        
        <% if (submissions && submissions.length > 0) { %>
            <div class="table-container">
                <table class="scores-table">
                    <thead>
                        <tr>
                            <th>Subject</th>
                            <th>Topic</th>
                            <th>Date</th>
                            <th>Score</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        <% submissions.forEach(submission => { %>
                            <% 
                               const testData = submission.test || {};
                               
                               // Calculate obtained marks safely
                               let obtainedMarks = 0;
                               if (typeof submission.obtainedMarks !== 'undefined' && !isNaN(submission.obtainedMarks)) {
                                   obtainedMarks = submission.obtainedMarks;
                               } else if (submission.marks) {
                                   try {
                                      const marksArray = submission.marks.split(',').map(Number);
                                      obtainedMarks = marksArray.reduce((sum, mark) => !isNaN(mark) ? sum + mark : sum, 0);
                                   } catch (e) {
                                      obtainedMarks = 0;
                                   }
                               }
                               
                               // Get total marks safely
                               const totalMarks = (testData && testData.totalMarks && !isNaN(testData.totalMarks)) 
                                                  ? testData.totalMarks 
                                                  : 0;
                               
                               // Calculate score percentage
                               let scorePercentage = 0;
                               if (totalMarks > 0) {
                                   scorePercentage = Math.round((obtainedMarks / totalMarks) * 100);
                               }
                               
                               let scoreClass = '';
                               if (scorePercentage >= 75) {
                                   scoreClass = 'score-high';
                               } else if (scorePercentage >= 50) {
                                   scoreClass = 'score-medium';
                               } else {
                                   scoreClass = 'score-low';
                               }
                               
                               // Format date safely
                               let formattedDate = 'Invalid Date';
                               let formattedTime = 'Invalid Time';
                               try {
                                   const date = new Date(submission.createdAt);
                                   if (!isNaN(date.getTime())) {
                                       formattedDate = date.toLocaleDateString();
                                       formattedTime = date.toLocaleTimeString();
                                   }
                               } catch (e) { }
                            %>
                            <tr>
                                <td><strong><%= testData.subject || 'Unknown Subject' %></strong></td>
                                <td><%= testData.topic || 'Unknown Topic' %></td>
                                <td>
                                    <%= formattedDate %>
                                    <div class="score-info">
                                        <%= formattedTime %>
                                    </div>
                                </td>
                                <td>
                                    <div class="score-percentage <%= scoreClass %>">
                                        <i class="fas fa-chart-line"></i>
                                        <%= scorePercentage %>%
                                    </div>
                                    <div class="score-info">
                                        <% if (totalMarks > 0) { %>
                                            <%= obtainedMarks %> / <%= totalMarks %> marks
                                        <% } else { %>
                                            <span class="invalid-data">Score data incomplete</span>
                                        <% } %>
                                    </div>
                                </td>
                                <td>
                                    <button class="btn view-details-btn" data-id="<%= submission._id %>">
                                        <i class="fas fa-eye"></i> View Details
                                    </button>
                                </td>
                            </tr>
                        <% }) %>
                    </tbody>
                </table>
            </div>
        <% } else { %>
            <div class="no-scores">
                <i class="fas fa-clipboard-check"></i>
                <p>You haven't completed any tests yet.</p>
            </div>
        <% } %>
    </div>

    <!-- Modal Structure -->
    <div class="modal-overlay" id="testDetailsModal">
        <div class="modal-container">
            <div class="modal-header">
                <h2><i class="fas fa-file-alt"></i> Test Details</h2>
                <button class="modal-close" id="closeModal">&times;</button>
            </div>
            <div class="loading-spinner" id="modalLoader">
                <div class="spinner"></div>
                <p>Loading test details...</p>
            </div>
            <div class="modal-body" id="modalContent">
                <!-- Content will be loaded dynamically -->
            </div>
            <div class="modal-footer">
                <button class="btn" id="closeModalBtn">Close</button>
            </div>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const modal = document.getElementById('testDetailsModal');
            const modalContent = document.getElementById('modalContent');
            const closeModal = document.getElementById('closeModal');
            const closeModalBtn = document.getElementById('closeModalBtn');
            const modalLoader = document.getElementById('modalLoader');
            
            // Add click event to all View Details buttons
            document.querySelectorAll('.view-details-btn').forEach(button => {
                button.addEventListener('click', function() {
                    const submissionId = this.getAttribute('data-id');
                    openModal(submissionId);
                });
            });
            
            // Close modal when clicking the X or Close button
            closeModal.addEventListener('click', () => {
                modal.classList.remove('active');
            });
            
            closeModalBtn.addEventListener('click', () => {
                modal.classList.remove('active');
            });
            
            // Close modal when clicking outside
            modal.addEventListener('click', function(e) {
                if (e.target === modal) {
                    modal.classList.remove('active');
                }
            });
            
            function openModal(submissionId) {
                // Show modal and loading spinner
                modal.classList.add('active');
                modalContent.style.display = 'none';
                modalLoader.style.display = 'block';
                
                // Fetch test details
                fetch(`/student/api/submission/${submissionId}`)
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Failed to fetch test details');
                        }
                        return response.json();
                    })
                    .then(data => {
                        // Hide loader and show content
                        modalLoader.style.display = 'none';
                        modalContent.style.display = 'block';
                        
                        // Render test details
                        renderTestDetails(data);
                    })
                    .catch(error => {
                        modalLoader.style.display = 'none';
                        modalContent.style.display = 'block';
                        modalContent.innerHTML = `
                            <div class="detail-card">
                                <div class="detail-title">
                                    <i class="fas fa-exclamation-triangle"></i> Error
                                </div>
                                <p>Failed to load test details. Please try again later.</p>
                            </div>
                        `;
                        console.error('Error fetching test details:', error);
                    });
            }
            
            function renderTestDetails(data) {
                const submission = data.submission || {};
                const test = submission.test || {};
                
                // Calculate obtained marks safely
                let obtainedMarks = 0;
                if (typeof submission.obtainedMarks !== 'undefined' && !isNaN(submission.obtainedMarks)) {
                    obtainedMarks = submission.obtainedMarks;
                } else if (submission.marks) {
                    try {
                        const marksArray = submission.marks.split(',').map(Number);
                        obtainedMarks = marksArray.reduce((sum, mark) => !isNaN(mark) ? sum + mark : sum, 0);
                    } catch (e) {
                        obtainedMarks = 0;
                    }
                }
                
                // Get total marks safely
                const totalMarks = (test && test.totalMarks && !isNaN(test.totalMarks)) ? test.totalMarks : 0;
                
                // Calculate score percentage
                let scorePercentage = 0;
                if (totalMarks > 0) {
                    scorePercentage = Math.round((obtainedMarks / totalMarks) * 100);
                }
                
                let scoreClass = '';
                let performanceStatus = '';
                
                if (scorePercentage >= 75) {
                    scoreClass = 'progress-high';
                    performanceStatus = '<span class="status-high">Excellent</span>';
                } else if (scorePercentage >= 50) {
                    scoreClass = 'progress-medium';
                    performanceStatus = '<span class="status-medium">Good</span>';
                } else {
                    scoreClass = 'progress-low';
                    performanceStatus = '<span class="status-low">Needs Improvement</span>';
                }
                
                // Format time taken
                let timeTakenDisplay = 'Not recorded';
                if (submission.timeTaken && !isNaN(submission.timeTaken)) {
                    const minutes = Math.floor(submission.timeTaken / 60);
                    const seconds = submission.timeTaken % 60;
                    timeTakenDisplay = `${minutes}m ${seconds}s`;
                }
                
                // Format submission date safely
                let submissionDate = 'Not available';
                try {
                    const date = new Date(submission.submittedAt);
                    if (!isNaN(date.getTime())) {
                        submissionDate = date.toLocaleString();
                    }
                } catch (e) { }
                
                // Build HTML content
                let html = `
                    <div class="detail-card">
                        <div class="detail-title">
                            <i class="fas fa-info-circle"></i> Test Information
                        </div>
                        <div class="detail-row">
                            <span class="detail-label">Subject:</span>
                            <span class="detail-value">${test.subject || 'Not available'}</span>
                        </div>
                        <div class="detail-row">
                            <span class="detail-label">Topic:</span>
                            <span class="detail-value">${test.topic || 'Not available'}</span>
                        </div>
                        <div class="detail-row">
                            <span class="detail-label">Test Code:</span>
                            <span class="detail-value">${test.code || 'Not available'}</span>
                        </div>
                        <div class="detail-row">
                            <span class="detail-label">Total Questions:</span>
                            <span class="detail-value">${test.totalQuestions || 'Not available'}</span>
                        </div>
                        <div class="detail-row">
                            <span class="detail-label">Total Marks:</span>
                            <span class="detail-value">${totalMarks || 'Not available'}</span>
                        </div>
                    </div>
                    
                    <div class="detail-card">
                        <div class="detail-title">
                            <i class="fas fa-chart-pie"></i> Performance Summary
                        </div>
                        <div class="progress-container">
                            <div class="progress-bar">
                                <div class="progress-fill ${scoreClass}" style="width: ${scorePercentage}%;"></div>
                            </div>
                            <div class="progress-stats">
                                <span>Score: ${obtainedMarks} / ${totalMarks || 'N/A'}</span>
                                <span>${scorePercentage}%</span>
                            </div>
                            <div class="performance-status">
                                Performance: ${performanceStatus}
                            </div>
                        </div>
                        <div class="detail-row">
                            <span class="detail-label">Completed on:</span>
                            <span class="detail-value">${submissionDate}</span>
                        </div>
                        <div class="detail-row">
                            <span class="detail-label">Time taken:</span>
                            <span class="detail-value">${timeTakenDisplay}</span>
                        </div>
                    </div>
                `;
                
                // Add questions and answers section
                if (submission.question && submission.question.length > 0) {
                    html += `
                        <div class="detail-card">
                            <div class="detail-title">
                                <i class="fas fa-question-circle"></i> Questions & Answers
                            </div>
                            <div class="questions-list">
                    `;
                    
                    // Find matching questions from test data
                    submission.test.questions.forEach((question, index) => {
                        // Safely access question data
                        const testQuestions = test.questions || [];
                        const questionData = testQuestions.find(q => q && q.id === question) || {};
                        const answer = submission.answer && submission.answer[index] ? submission.answer[index] : 'No answer provided';
                        const mark = question.marks || 'N/A';
                        const questionType = question.type || 'N/A';
                        
                        html += `
                            <div class="question-item">
                                <div class="question-text">
                                    <strong>Q${index + 1}:</strong> ${ question.question || 'Question text unavailable'}
                                </div>
                                <div class="answer-container">
                                    <strong>Your Answer:</strong> ${answer}
                                </div>
                                <div class="answer-container">
                                    <strong>Correct Answer:</strong> ${questionData.answer || 'Not available'}
                                </div>
                                <div class="question-meta">
                                    <span>Question Type: ${questionType}</span>
                                    <span>Marks: ${mark}</span>
                                </div>
                            </div>
                        `;
                    });
                    
                    html += `
                            </div>
                        </div>
                    `;
                }
                
                modalContent.innerHTML = html;
            }
        });
    </script>
</body>
</html>