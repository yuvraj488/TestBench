<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Test - <%= test.subject %> - <%= test.topic %></title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        :root {
            --bg-color: #111827;
            --card-bg: #1f2937;
            --primary-color: #3b82f6;
            --primary-hover: #60a5fa;
            --text-color: #e5e7eb;
            --text-muted: #9ca3af;
            --input-bg: #374151;
            --input-border: #4b5563;
            --input-focus: #60a5fa;
            --border-radius: 8px;
            --shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.3), 0 4px 6px -2px rgba(0, 0, 0, 0.15);
        }
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: var(--bg-color);
            color: var(--text-color);
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            padding: 20px;
        }
        
        .test-container {
            width: 1200px;
            background: var(--card-bg);
            border-radius: var(--border-radius);
            box-shadow: var(--shadow);
            overflow: hidden;
            position: relative;
            transition: transform 0.3s ease;
        }
        
        .test-container:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 25px -5px rgba(0, 0, 0, 0.4), 0 10px 10px -5px rgba(0, 0, 0, 0.2);
        }
        
        .test-header {
            background: linear-gradient(135deg, #374151 0%, #1e3a8a 100%);
            padding: 30px 20px;
            text-align: center;
            color: white;
        }
        
        .test-header h1 {
            font-weight: 600;
            font-size: 24px;
            margin-bottom: 5px;
        }
        
        .test-header .subject-topic {
            opacity: 0.8;
            font-size: 16px;
            margin-top: 5px;
        }
        
        .test-content {
            padding: 30px;
            width: 100%;
        }
        form{
            width:800px;
        }
        
        .question-container {
            background-color: var(--input-bg);
            border-radius: var(--border-radius);
            padding: 20px;
            margin-bottom: 20px;
            border: 1px solid var(--input-border);
            transition: all 0.3s ease;
        }
        
        .question-container:hover {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 2px rgba(96, 165, 250, 0.1);
        }
        
        .question {
            margin-bottom: 15px;
        }
        
        .question-number {
            display: inline-block;
            background-color: var(--primary-color);
            color: white;
            width: 28px;
            height: 28px;
            line-height: 28px;
            text-align: center;
            border-radius: 50%;
            margin-right: 10px;
            font-weight: 500;
        }
        
        .question-text {
            font-size: 16px;
            font-weight: 500;
            margin-bottom: 15px;
            color: var(--text-color);
            display: block;
        }
        
        .answer-input {
            width: 100%;
            padding: 12px 20px;
            border: 1px solid var(--input-border);
            border-radius: var(--border-radius);
            background-color: var(--card-bg);
            font-size: 14px;
            color: var(--text-color);
            transition: all 0.3s ease;
        }
        
        .answer-input:focus {
            outline: none;
            border-color: var(--input-focus);
            box-shadow: 0 0 0 3px rgba(96, 165, 250, 0.2);
        }
        
        .answer-input::placeholder {
            color: var(--text-muted);
        }
        
        .submit-container {
            text-align: center;
            margin-top: 30px;
        }
        
        .submit-btn {
            padding: 12px 25px;
            background-color: var(--primary-color);
            color: white;
            border: none;
            border-radius: var(--border-radius);
            font-size: 16px;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s ease;
            display: inline-flex;
            align-items: center;
            justify-content: center;
        }
        
        .submit-btn:hover {
            background-color: var(--primary-hover);
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);
        }
        
        .submit-btn i {
            margin-right: 8px;
        }
        
        .progress-bar {
            height: 6px;
            background-color: var(--input-border);
            border-radius: 3px;
            margin: 30px 0;
            overflow: hidden;
        }
        
        .progress {
            height: 100%;
            background: linear-gradient(90deg, var(--primary-color), var(--primary-hover));
            width: 0%;
            transition: width 0.3s ease;
        }
        
        .timer {
            position: absolute;
            top: 20px;
            right: 20px;
            background-color: rgba(0, 0, 0, 0.2);
            padding: 8px 12px;
            border-radius: var(--border-radius);
            font-size: 14px;
            display: flex;
            align-items: center;
        }
        
        .timer i {
            margin-right: 5px;
        }
        
        .modal-overlay {
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: rgba(0, 0, 0, 0.7);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 1000;
        }
        
        .modal {
            width: 90%;
            max-width: 500px;
            background-color: var(--card-bg);
            border-radius: var(--border-radius);
            padding: 30px;
            box-shadow: var(--shadow);
            animation: fadeIn 0.3s ease;
        }
        
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(-20px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        .modal-header {
            border-bottom: 1px solid var(--input-border);
            margin-bottom: 20px;
            padding-bottom: 15px;
        }
        
        .modal-title {
            font-size: 20px;
            font-weight: 600;
        }
        
        .modal-body {
            margin-bottom: 25px;
        }
        
        .test-info {
            margin-bottom: 15px;
        }
        
        .test-info-item {
            display: flex;
            margin-bottom: 10px;
        }
        
        .test-info-label {
            width: 150px;
            font-weight: 500;
            color: var(--text-muted);
        }
        
        .test-info-value {
            flex: 1;
        }
        
        .marks-distribution {
            background-color: var(--input-bg);
            border-radius: var(--border-radius);
            padding: 15px;
            margin-top: 15px;
        }
        
        .marks-title {
            font-weight: 500;
            margin-bottom: 10px;
            color: var(--primary-color);
        }
        
        .marks-list {
            list-style: none;
        }
        
        .marks-list li {
            display: flex;
            justify-content: space-between;
            margin-bottom: 6px;
            font-size: 14px;
        }
        
        .modal-footer {
            display: flex;
            justify-content: space-between;
            margin-top: 20px;
        }
        
        .modal-btn {
            padding: 10px 20px;
            border-radius: var(--border-radius);
            font-weight: 500;
            cursor: pointer;
            transition: all 0.2s ease;
        }
        
        .btn-secondary {
            background-color: var(--input-bg);
            color: var(--text-color);
            border: 1px solid var(--input-border);
        }
        
        .btn-secondary:hover {
            background-color: var(--input-border);
        }
        
        .btn-primary {
            background-color: var(--primary-color);
            color: white;
            border: none;
        }
        
        .btn-primary:hover {
            background-color: var(--primary-hover);
        }
        
        .hidden {
            display: none;
        }
        
        .fullscreen-notice {
            position: fixed;
            top: 10px;
            left: 50%;
            transform: translateX(-50%);
            background-color: #f43f5e;
            color: white;
            padding: 10px 20px;
            border-radius: var(--border-radius);
            font-size: 14px;
            z-index: 2000;
            display: none;
            align-items: center;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
        }
        
        .fullscreen-notice i {
            margin-right: 8px;
        }

        /* Question navigation styles */
        .test-layout {
            display: flex;
            gap: 20px;
            margin-top: 20px;
            width: 100%;
        }
        
        .question-navigation {
            width: 250px;
            background-color: var(--input-bg);
            padding: 15px;
            border-radius: var(--border-radius);
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.2);
            height: fit-content;
            position: sticky;
            top: 20px;
        }
        
        .marks-category {
            margin-bottom: 25px;
        }
        
        .marks-category h3 {
            font-size: 14px;
            margin-bottom: 15px;
            color: var(--primary-color);
            font-weight: 600;
            border-bottom: 1px solid var(--input-border);
            padding-bottom: 8px;
        }
        
        .question-numbers {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
        }
        
        .question-number-item {
            width: 32px;
            height: 32px;
            border-radius: 50%;
            background-color: var(--card-bg);
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 14px;
            cursor: pointer;
            transition: all 0.2s;
            border: 1px solid var(--input-border);
        }
        
        .question-number-item:hover {
            background-color: var(--input-border);
            transform: scale(1.1);
        }
        
        .question-number-item.active {
            background-color: var(--primary-color);
            color: white;
            border-color: var(--primary-hover);
            box-shadow: 0 0 0 2px rgba(96, 165, 250, 0.3);
        }
        
        .question-number-item.answered {
            background-color: #10b981;
            color: white;
            border-color: #059669;
        }
        
        .question-slider {
            flex: 1;
            position: relative;
            overflow: hidden;
            min-height: 200px;
        }
        
        .question-container {
            position: absolute;
            width: 100%;
            transition: transform 0.5s ease;
            display: none;
        }
        
        .question-container.active {
            display: block;
            animation: slideIn 0.5s forwards;
        }
        
        @keyframes slideIn {
            from {
                opacity: 0;
                transform: translateX(50px);
            }
            to {
                opacity: 1;
                transform: translateX(0);
            }
        }
        
        @keyframes slideOutLeft {
            from {
                opacity: 1;
                transform: translateX(0);
            }
            to {
                opacity: 0;
                transform: translateX(-50px);
            }
        }
        
        @keyframes slideOutRight {
            from {
                opacity: 1;
                transform: translateX(0);
            }
            to {
                opacity: 0;
                transform: translateX(50px);
            }
        }
        
        .navigation-buttons {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-top: 30px;
        }
        
        .nav-btn {
            padding: 10px 20px;
            background-color: var(--input-bg);
            border: 1px solid var(--input-border);
            border-radius: var(--border-radius);
            cursor: pointer;
            font-weight: 500;
            display: flex;
            align-items: center;
            gap: 8px;
            transition: all 0.3s ease;
            color: var(--text-color);
        }
        
        .nav-btn:hover {
            background-color: var(--input-border);
            transform: translateY(-2px);
        }
        
        .nav-btn:disabled {
            opacity: 0.5;
            cursor: not-allowed;
            transform: none;
        }
        
        .question-counter {
            font-size: 14px;
            color: var(--text-muted);
            background-color: var(--input-bg);
            padding: 8px 16px;
            border-radius: var(--border-radius);
        }
        
        @media screen and (max-width: 768px) {
            .test-container {
                width: 100%;
            }
            
            .test-header h1 {
                font-size: 20px;
            }
            
            .question-text {
                font-size: 15px;
            }
            
            .modal {
                width: 95%;
                padding: 20px;
            }
            
            .test-layout {
                flex-direction: column;
            }
            
            .question-navigation {
                width: 100%;
                position: static;
            }
        }
    </style>
</head>
<body>
        <div class="modal-overlay" id="testInfoModal">
            <div class="modal">
                <div class="modal-header">
                    <h2 class="modal-title"><%= test.subject %> - <%= test.topic %></h2>
                </div>
                <div class="modal-body">
                    <div class="test-info">
                        <div class="test-info-item">
                            <div class="test-info-label">Subject:</div>
                            <div class="test-info-value"><%= test.subject %></div>
                        </div>
                        <div class="test-info-item">
                            <div class="test-info-label">Topic:</div>
                            <div class="test-info-value"><%= test.topic %></div>
                        </div>
                        <div class="test-info-item">
                            <div class="test-info-label">Total Questions:</div>
                            <div class="test-info-value"><%= test.totalQuestions %></div>
                        </div>
                        <div class="test-info-item">
                            <div class="test-info-label">Total Marks:</div>
                            <div class="test-info-value"><%= test.totalMarks %></div>
                        </div>
                        <div class="test-info-item">
                            <div class="test-info-label">Duration:</div>
                            <div class="test-info-value"><%= test.testDuration %> minutes</div>
                        </div>
                    </div>
                    
                    <div class="marks-distribution">
                        <h3 class="marks-title">Marks Distribution</h3>
                        <ul class="marks-list">
                            <% 
                            let oneMarkers = 0;
                            let twoMarkers = 0;
                            let fiveMarkers = 0;
                            
                            test.questions.forEach(question => {
                                if (question.type === '1-marker') oneMarkers++;
                                else if (question.type === '2-marker') twoMarkers++;
                                else if (question.type === '5-marker') fiveMarkers++;
                            });
                            %>
                            
                            <% if (oneMarkers > 0) { %>
                                <li>
                                    <span>1-marker questions:</span>
                                    <span><%= oneMarkers %> questions (<%= oneMarkers * 1 %> marks)</span>
                                </li>
                            <% } %>
                            
                            <% if (twoMarkers > 0) { %>
                                <li>
                                    <span>2-marker questions:</span>
                                    <span><%= twoMarkers %> questions (<%= twoMarkers * 2 %> marks)</span>
                                </li>
                            <% } %>
                            
                            <% if (fiveMarkers > 0) { %>
                                <li>
                                    <span>5-marker questions:</span>
                                    <span><%= fiveMarkers %> questions (<%= fiveMarkers * 5 %> marks)</span>
                                </li>
                            <% } %>
                        </ul>
                    </div>
                    
                    <p style="margin-top: 20px; font-size: 14px; color: #f43f5e;">
                        <i class="fas fa-exclamation-triangle"></i> Note: Once started, the test will open in full-screen mode.
                        You cannot exit full-screen until you submit the test or the time expires.
                    </p>
                </div>
                <div class="modal-footer">
                    <a href="/student/dashboard">
                        <button id="backBtn" class="modal-btn btn-secondary">
                            <i class="fas fa-arrow-left"></i> Go Back
                        </button>
                    </a>
                    <button id="startTestBtn" class="modal-btn btn-primary">
                        <i class="fas fa-play"></i> Start Test
                    </button>
                </div>
            </div>
        </div>
        
        <div class="fullscreen-notice" id="fullscreenNotice">
            <i class="fas fa-exclamation-triangle"></i>
            Please return to full-screen mode to continue your test
        </div>
        
        <div class="test-container hidden" id="testContainer">
            <div class="test-header">
                <h1>Test Assessment</h1>
                <div class="subject-topic"><%= test.subject %> - <%= test.topic %></div>
                <div class="timer">
                    <i class="fas fa-clock"></i>
                    <span id="timer-display">Time remaining</span>
                </div>
            </div>
            
            <div class="test-content">
                <div class="progress-bar">
                    <div class="progress" id="progress-indicator"></div>
                </div>
                
                <div class="test-layout">
                    <div class="question-navigation">
                        <div class="marks-section">
                            <% 
                            let questionCount = 1;
                            let marksTypes = ['1-marker', '2-marker', '5-marker'];
                            
                            marksTypes.forEach(marksType => {
                                let questions = test.questions.filter(q => q.type === marksType);
                                if (questions.length > 0) {
                                    let marks = marksType.split('-')[0];
                            %>
                                <div class="marks-category">
                                    <h3><%= marks %>-Mark Questions (<%= questions.length %>)</h3>
                                    <div class="question-numbers">
                                        <% questions.forEach((q, i) => { %>
                                            <div class="question-number-item" data-question="<%= questionCount++ %>">
                                                <%= questionCount - 1 %>
                                            </div>
                                        <% }); %>
                                    </div>
                                </div>
                            <% 
                                }
                            });
                            %>
                        </div>
                    </div>
                    
                    <form method="POST" action="/test/<%= test.code %>/submit" id="test-form">
                        <div class="question-slider">
                            <% test.questions.forEach((question, index) => { %>
                                <div class="question-container" id="question-slide-<%= index + 1 %>">
                                    <div class="question">
                                        <span class="question-text">
                                            <span class="question-number"><%= index + 1 %></span>
                                            <%= question.question %>
                                            <% if (question.type) { %>
                                                <span style="color: var(--primary-color); font-size: 0.85em; margin-left: 10px;">
                                                    [<%= question.type %>]
                                                </span>
                                            <% } %>
                                        </span>
                                        <textarea type="text" 
                                               class="answer-input" 
                                               id="question<%= index + 1 %>" 
                                               name="question<%= index + 1 %>" 
                                               required 
                                               placeholder="Type your answer here"
                                               oninput="updateAnswerStatus('<%= index + 1 %>')"></textarea>
                                        <input type="hidden" name="questionId<%= index + 1 %>" value="<%= question.id %>">
                                    </div>
                                </div>
                            <% }) %>
                        </div>
                        
                        <div class="navigation-buttons">
                            <button type="button" id="prevBtn" class="nav-btn">
                                <i class="fas fa-arrow-left"></i> Previous
                            </button>
                            <div class="question-counter">
                                Question <span id="currentQuestionNumber">1</span> of <%= test.questions.length %>
                            </div>
                            <button type="button" id="nextBtn" class="nav-btn">
                                Next <i class="fas fa-arrow-right"></i>
                            </button>
                        </div>
                        
                        <input type="hidden" name="timeTaken" id="timeTaken" value="0">
                        
                        <div class="submit-container">
                            <button type="submit" class="submit-btn">
                                <i class="fas fa-paper-plane"></i> Submit Test
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    
    
        <script>
            const testInfoModal = document.getElementById('testInfoModal');
            const testContainer = document.getElementById('testContainer');
            const backBtn = document.getElementById('backBtn');
            const startTestBtn = document.getElementById('startTestBtn');
            const fullscreenNotice = document.getElementById('fullscreenNotice');
            const timerDisplay = document.getElementById('timer-display');
            const testForm = document.getElementById('test-form');
            const prevBtn = document.getElementById('prevBtn');
            const nextBtn = document.getElementById('nextBtn');
            const currentQuestionNumber = document.getElementById('currentQuestionNumber');
            
            let testStarted = false;
            let timeLeft = `<%= test.testDuration || 60 %>`; 
            let timerInterval;
            let fullscreenExitAttempts = 0;
            let startTime = Date.now();
            let currentQuestionIndex = 1;
            const totalQuestions = '<%= test.questions.length %>';
            
            backBtn.addEventListener('click', function() {
                window.href.location='/student/dashboard';
            });
            
            startTestBtn.addEventListener('click', function() {
                startTest();
            });
            
            function startTest() {
                if (document.documentElement.requestFullscreen) {
                    document.documentElement.requestFullscreen()
                        .then(() => {
                            activateTest();
                        })
                        .catch((err) => {
                            console.error('Error attempting to enable full-screen mode:', err);
                            alert('Fullscreen is required to take this test. Please try again.');
                        });
                } else if (document.documentElement.mozRequestFullScreen) {
                    document.documentElement.mozRequestFullScreen();
                    activateTest();
                } else if (document.documentElement.webkitRequestFullscreen) {
                    document.documentElement.webkitRequestFullscreen();
                    activateTest();
                } else if (document.documentElement.msRequestFullscreen) {
                    document.documentElement.msRequestFullscreen();
                    activateTest();
                } else {
                    alert('Fullscreen is not supported in your browser. The test will continue without fullscreen mode.');
                    activateTest();
                }
            }
            
            function activateTest() {
                testStarted = true;
                
                testInfoModal.style.display = 'none';
                testContainer.classList.remove('hidden');
                
                startTimer();
                updateProgress();
                showQuestion(1);
                
                initQuestionNavigation();
                
                document.addEventListener('fullscreenchange', handleFullscreenChange);
                document.addEventListener('webkitfullscreenchange', handleFullscreenChange);
                document.addEventListener('mozfullscreenchange', handleFullscreenChange);
                document.addEventListener('MSFullscreenChange', handleFullscreenChange);
                
                window.history.pushState(null, null, window.location.href);
                window.addEventListener('popstate', function(event) {
                    if (testStarted && !confirm('Are you sure you want to leave? Your test progress will be lost.')) {
                        window.history.pushState(null, null, window.location.href);
                    }
                });
                
                window.addEventListener('beforeunload', function(e) {
                    if (testStarted) {
                        e.preventDefault();
                        e.returnValue = 'Your test progress will be lost. Are you sure you want to leave?';
                        return e.returnValue;
                    }
                });
            }
            
            function initQuestionNavigation() {
                const questionNumberItems = document.querySelectorAll('.question-number-item');
                
                questionNumberItems.forEach(item => {
                    item.addEventListener('click', function() {
                        const questionNumber = parseInt(this.getAttribute('data-question'));
                        showQuestion(questionNumber);
                    });
                });
                
                prevBtn.addEventListener('click', function() {
                    if (currentQuestionIndex > 1) {
                        showQuestion(currentQuestionIndex - 1, 'prev');
                    }
                });
                
                nextBtn.addEventListener('click', function() {
                    if (currentQuestionIndex < totalQuestions) {
                        showQuestion(currentQuestionIndex + 1, 'next');
                    }
                });
                
                updateNavigationButtons();
            }
            
            function showQuestion(questionNumber, direction = null) {
                const currentQuestion = document.getElementById(`question-slide-${currentQuestionIndex}`);
                if (currentQuestion) {
                    if (direction === 'prev') {
                        currentQuestion.style.animation = 'slideOutRight 0.3s forwards';
                    } else if (direction === 'next') {
                        currentQuestion.style.animation = 'slideOutLeft 0.3s forwards';
                    }
                    
                    setTimeout(() => {
                        currentQuestion.classList.remove('active');
                        currentQuestion.style.animation = '';
                        
                        const newQuestion = document.getElementById(`question-slide-${questionNumber}`);
                        if (newQuestion) {
                            newQuestion.classList.add('active');
                        }
                        
                        currentQuestionIndex = questionNumber;
                        currentQuestionNumber.textContent = currentQuestionIndex;
                        
                        updateNavigationStatus();
                        updateNavigationButtons();
                    }, 300);
                } else {
                    const newQuestion = document.getElementById(`question-slide-${questionNumber}`);
                    if (newQuestion) {
                        newQuestion.classList.add('active');
                    }
                    
                    currentQuestionIndex = questionNumber;
                    currentQuestionNumber.textContent = currentQuestionIndex;
                    
                    updateNavigationStatus();
                    updateNavigationButtons();
                }
            }
            
            function updateNavigationStatus() {
                const questionNumberItems = document.querySelectorAll('.question-number-item');
                questionNumberItems.forEach(item => {
                    const questionNum = parseInt(item.getAttribute('data-question'));
                    
                    item.classList.remove('active', 'answered');
                    
                    if (questionNum === currentQuestionIndex) {
                        item.classList.add('active');
                    }
                    
                    const input = document.getElementById(`question${questionNum}`);
                    if (input && input.value.trim().length > 0) {
                        item.classList.add('answered');
                    }
                });
            }
            
            function updateNavigationButtons() {
                if (currentQuestionIndex === 1) {
                    prevBtn.disabled = true;
                    prevBtn.style.opacity = '0.5';
                    prevBtn.style.cursor = 'not-allowed';
                } else {
                    prevBtn.disabled = false;
                    prevBtn.style.opacity = '1';
                    prevBtn.style.cursor = 'pointer';
                }
                
                if (currentQuestionIndex === totalQuestions) {
                    nextBtn.disabled = true;
                    nextBtn.style.opacity = '0.5';
                    nextBtn.style.cursor = 'not-allowed';
                } else {
                    nextBtn.disabled = false;
                    nextBtn.style.opacity = '1';
                    nextBtn.style.cursor = 'pointer';
                }
            }
            
            function handleFullscreenChange() {
                if (testStarted && 
                    !document.fullscreenElement && 
                    !document.webkitFullscreenElement && 
                    !document.mozFullScreenElement && 
                    !document.msFullscreenElement) {
                    
                    fullscreenExitAttempts++;
                    
                    fullscreenNotice.style.display = 'flex';
                    
                    setTimeout(() => {
                        if (fullscreenExitAttempts > 3) {
                            alert('You have exited fullscreen mode multiple times. Your test will be submitted automatically.');
                            testForm.submit();
                            return;
                        }
                        
                        if (document.documentElement.requestFullscreen) {
                            document.documentElement.requestFullscreen();
                        } else if (document.documentElement.mozRequestFullScreen) {
                            document.documentElement.mozRequestFullScreen();
                        } else if (document.documentElement.webkitRequestFullscreen) {
                            document.documentElement.webkitRequestFullscreen();
                        } else if (document.documentElement.msRequestFullscreen) {
                            document.documentElement.msRequestFullscreen();
                        }
                        
                        fullscreenNotice.style.display = 'none';
                    }, 1500);
                }
            }
            
            function startTimer() {
                let secondsLeft = timeLeft * 60;
                
                updateTimerDisplay(secondsLeft);
                
                timerInterval = setInterval(() => {
                    secondsLeft--;
                    
                    if (secondsLeft <= 0) {
                        clearInterval(timerInterval);
                        alert("Time's up! Your test will be submitted automatically.");
                        testForm.submit();
                    } else {
                        updateTimerDisplay(secondsLeft);
                    }
                }, 1000);
            }
            
            function updateTimerDisplay(seconds) {
                const minutes = Math.floor(seconds / 60);
                const remainingSeconds = seconds % 60;
                timerDisplay.textContent = `${minutes}:${remainingSeconds < 10 ? '0' : ''}${remainingSeconds}`;
                
                if (seconds < 300) {
                    timerDisplay.style.color = '#f43f5e';
                }
            }
            
            function updateProgress() {
                const totalQuestions = document.querySelectorAll('.question-container').length;
                const answeredQuestions = document.querySelectorAll('.answer-input:valid').length;
                const progressPercentage = (answeredQuestions / totalQuestions) * 100;
                
                document.getElementById('progress-indicator').style.width = progressPercentage + '%';
            }
            
            function updateAnswerStatus(questionNumber) {
                updateProgress();
                updateNavigationStatus();
                
                const input = document.getElementById(`question${questionNumber}`);
                if (input && input.value.trim().length > 0 && questionNumber < totalQuestions) {
                    // Uncomment this line if you want to automatically move to the next question after answering
                    // showQuestion(questionNumber + 1, 'next');
                }
            }
            
            testForm.addEventListener('submit', function(e) {
                const elapsedSeconds = Math.floor((Date.now() - startTime) / 1000);
                document.getElementById('timeTaken').value = elapsedSeconds;
                
                if (document.exitFullscreen) {
                    document.exitFullscreen();
                } else if (document.webkitExitFullscreen) {
                    document.webkitExitFullscreen();
                } else if (document.mozCancelFullScreen) {
                    document.mozCancelFullScreen();
                } else if (document.msExitFullscreen) {
                    document.msExitFullscreen();
                }
                
                clearInterval(timerInterval);
            });
        </script>
    </body>

</html>